apply plugin: "java"

version '1.0'

targetCompatibility = 8
sourceCompatibility = 17

buildscript {
    repositories {
        maven {
            allowInsecureProtocol true
            url 'https://maven.aliyun.com/repository/public/'
        }
        //mavenCentral()
    }

    ext {
        //the build number that this mod is made for
        sdkRoot = System.getenv('ANDROID_HOME') ?: System.getenv('ANDROID_SDK_ROOT')
    }

    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
    }
}

ext {
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    sdkVersion = "29.0.3"
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.github.Anuken.Arc') {
            details.useVersion "$mindustryVersion"
        }
    }
}
//java 8 backwards compatibility flag
allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

repositories {
    maven { url 'https://www.jitpack.io' }
    google()
    maven {
        allowInsecureProtocol true
        url 'https://maven.aliyun.com/repository/public/'
    }
    mavenCentral()
}

dependencies{
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    compileOnly("com.github.Anuken.Arc:arc-core:$mindustryVersion")
    compileOnly("com.github.TinyLake:MindustryX:v2025.05.X6"){
        exclude group: 'com.github.Anuken.Arc', module: 'flabel'
    }
}
    sourceSets.main.java.srcDirs = ["src/"]

task jarAndroid {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        def d8Opt = System.getenv("os.name") != null && System.getenv("os.name").contains("Windows") ? "$sdkRoot\\build-tools\\$sdkVersion\\d8.bat" : 'd8'

        //dex and desugar files - this requires d8 in your PATH
        "$d8Opt $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Mini.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    archiveFileName = "${project.archivesBaseName}Desktop.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }
}
task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Mini.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Mini.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

tasks.register('gameWin') {
    dependsOn jar
    doLast {
        //"cmd ;exit".execute().waitForProcessOutput(System.out, System.err)
        "cmd /C del /Q  C:\\Users\\dell\\AppData\\Roaming\\Mindustry\\mods\\${project.archivesBaseName}Desktop.jar".execute().waitForProcessOutput(System.out, System.err)
        "cmd /C move /Y $buildDir\\libs\\${project.archivesBaseName}Desktop.jar C:\\Users\\dell\\AppData\\Roaming\\Mindustry\\mods".execute().waitForProcessOutput(System.out, System.err)
        "cmd /C \"E:\\mindustry-windows-64-bit\\Mindustry.exe\"".execute().waitForProcessOutput(System.out, System.err)
    }
}

tasks.register('game') {
    dependsOn jar
    doLast {
        "mv -f $buildDir/libs/${project.archivesBaseName}Desktop.jar $buildDir/libs/mindustry_mod".execute().waitForProcessOutput(System.out, System.err)
        "/Users/abc/Mindustry.app/Contents/MacOS/Mindustry ; exit".execute().waitForProcessOutput(System.out, System.err)
    }
}